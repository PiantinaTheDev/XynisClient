package us.whitedev.exploits.impl;

import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.Random;
import us.whitedev.exploits.Exploit;
import us.whitedev.helpers.PacketHelper;
import us.whitedev.utils.OptionType;
import us.whitedev.utils.OptionUtil;

public class CommandsExploit implements Exploit {
   private static final String EXPLOIT_NAME = "ContentSpammer";
   private final Random random = new Random();

   public void onExploit(String[] args) {
      int power = Integer.parseInt(args[2]);
      String mode = args[3].toLowerCase(Locale.ROOT);
      int interval = Integer.parseInt(args[4]);
      String content = args[5].replace("[-space-]", " ");
      msgHelper.sendMessage(String.format("Sending Exploit... &8[&f%s&8]", this.getName()), true);
      if (content.startsWith("/") && mode.equals("command")) {
         content = content.substring(1);
      }

      (new Thread(() -> {
         try {
            for(int i = 0; i < power; ++i) {
               String var6 = mode.toLowerCase(Locale.ROOT);
               byte var7 = -1;
               switch(var6.hashCode()) {
               case 950394699:
                  if (var6.equals("command")) {
                     var7 = 0;
                  }
                  break;
               case 954925063:
                  if (var6.equals("message")) {
                     var7 = 1;
                  }
               }

               switch(var7) {
               case 0:
                  PacketHelper.sendCommand(content.replace("@r", this.getRandomName()));
                  break;
               case 1:
                  PacketHelper.sendChat(content.replace("@r", this.getRandomName()));
               }

               Thread.sleep((long)interval);
            }

         } catch (InterruptedException var8) {
            throw new RuntimeException(var8);
         }
      })).start();
      msgHelper.sendMessage("Exploit &asuccessfully &7sent!", true);
   }

   private String getRandomName() {
      try {
         List<String> possibleNames = new ArrayList();
         mc.player.connection.getListedOnlinePlayers().forEach((player) -> {
            possibleNames.add(player.getProfile().getName());
         });
         String randomName = (String)possibleNames.get(this.random.nextInt(0, possibleNames.isEmpty() ? 0 : possibleNames.size() - 1));
         return !randomName.isBlank() && !randomName.isEmpty() ? randomName : "xynis";
      } catch (Exception var3) {
         return "xynis";
      }
   }

   public String getName() {
      return "ContentSpammer";
   }

   public List<OptionUtil> getOptions() {
      return List.of(new OptionUtil("Power", OptionType.INTEGER), new OptionUtil("Mode", OptionType.LIST, new String[]{"Command", "Message"}), new OptionUtil("Interval", OptionType.INTEGER), new OptionUtil("Content", OptionType.STRING));
   }

   public String getArgsUsage() {
      return "power[1], mode[Command], interval[100], content[party xynis]";
   }

   public String getDescription() {
      return "Command/Message Spammer";
   }
}
